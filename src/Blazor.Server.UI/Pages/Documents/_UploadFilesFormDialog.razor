@using CleanArchitecture.Blazor.Application.Features.Documents.Commands.AddEdit
@using CleanArchitecture.Blazor.Application.Features.Documents.Commands.Upload
@using SixLabors.ImageSharp
@using SixLabors.ImageSharp.Formats
@using SixLabors.ImageSharp.Processing

@inherits MudComponentBase
@inject IStringLocalizer<Documents> L
<MudDialog>
    <DialogContent>
        @if (uploadedFiles.Any())
        {
            <div class="d-flex flex-column flex-grow-1">
                @foreach (var item in uploadedFiles)
                {
                    <MudGrid Spacing="1">
                        <MudItem xs="4" Class="align-self-center">
                            <MudText Typo="MudBlazor.Typo.body2" Inline="false" Style="text-overflow:ellipsis;overflow: hidden;">@item.FileName</MudText>
                        </MudItem>
                        <MudItem xs="5">
                            <MudProgressLinear Color="MudBlazor.Color.Success" Value="@item.UploadedBytes" Max="@item.Size" Class="my-7" />
                        </MudItem>
                        <MudItem xs="3" Class="align-self-center justify-end">
                            <MudText Typo="MudBlazor.Typo.body2" Style="float: right;">(@FormatBytes(item.UploadedBytes) / @FormatBytes(item.Size))</MudText>
                        </MudItem>
                    </MudGrid>
                }
            </div>
        }
        else
        {
            <MudAlert Severity="MudBlazor.Severity.Info"> @L["Please click [Choose Files] button to upload your photo."]</MudAlert>
        }
    </DialogContent>
    <DialogActions>
        <InputFile id="fileInput" OnChange="(async (e) =>await LoadFiles(e))" hidden multiple AllowedExtensions=".jpg;.png;"
                   CustomExtensionMessage="@L["Only .jpg and .png files are allowed."]" />
        <MudButton Color="MudBlazor.Color.Secondary" StartIcon="@Icons.Filled.Clear" Disabled="@(!uploadedFiles.Any())" OnClick="Clear">@L["Clear"]</MudButton>
        <MudButton Color="MudBlazor.Color.Info" StartIcon="@Icons.Filled.AttachFile" HtmlTag="label" for="fileInput">@L["Choose files"]</MudButton>
        <MudButton Color="MudBlazor.Color.Primary" OnClick="Submit" Disabled="@(_processing || _uploading || !uploadedFiles.Any())">
            @if (_processing)
            {
                <MudProgressCircular Class="ms-n1" Size="MudBlazor.Size.Small" Indeterminate="true" />
                <MudText Class="ms-2">Processing</MudText>
            }
            else
            {
                <MudText>@L["Upload"]</MudText>
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = default!;
    [EditorRequired][Parameter] public AddEditDocumentCommand model { get; set; } = default!;
    bool _processing;
    bool _uploading;
    [Inject]
    private IJSRuntime _js { get; set; } = default!;
    [Inject]
    private ISender _mediator { get; set; } = default!;
    [Inject] private IUploadService _uploadService { get; set; } = default!;
    List<FileUploadProgress> uploadedFiles = new();
    const long MAXALLOWEDSIZE =  5242880;
    private async ValueTask LoadFiles(InputFileChangeEventArgs e)
    {
        try
        {
            _uploading = true;
            var files = e.GetMultipleFiles(maximumFileCount: 100);
            var startIndex = uploadedFiles.Count;
            // Add all files to the UI
            foreach (var file in files)
            {
                var progress = new FileUploadProgress(file.Name, file.Size, file);
                uploadedFiles.Add(progress);
            }

            // We don't want to refresh the UI too frequently,
            // So, we use a timer to update the UI every few hundred milliseconds
            await using var timer = new Timer(_ => InvokeAsync(() => StateHasChanged()));
            timer.Change(TimeSpan.FromMilliseconds(500), TimeSpan.FromMilliseconds(500));

            // Upload files
            byte[] buffer = System.Buffers.ArrayPool<byte>.Shared.Rent(4096);
            try
            {
                foreach (var file in files)
                {
                    using var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024);
                    while (await stream.ReadAsync(buffer) is int read && read > 0)
                    {
                        uploadedFiles[startIndex].UploadedBytes += read;

                        // TODO Do something with the file chunk, such as save it
                        // to a database or a local file system
                        var readData = buffer.AsMemory().Slice(0, read);
                    }

                    startIndex++;
                }
            }
            finally
            {
                System.Buffers.ArrayPool<byte>.Shared.Return(buffer);

                // Update the UI with the final progress
                StateHasChanged();
            }
        }
        finally
        {
            _uploading = false;
        }
    }
    // Use the Meziantou.Framework.ByteSize NuGet package.
    // You could also use Humanizer
    string FormatBytes(long byteCount)
    {
        string[] suf = { "B", "KB", "MB", "GB", "TB", "PB", "EB" }; //Longs run out around EB
        if (byteCount == 0)
            return "0" + suf[0];
        long bytes = Math.Abs(byteCount);
        int place = Convert.ToInt32(Math.Floor(Math.Log(bytes, 1024)));
        double num = Math.Round(bytes / Math.Pow(1024, place), 1);
        return (Math.Sign(byteCount) * num).ToString() + suf[place];
    }

    async Task Submit()
    {
        try
        {
            _processing = true;
            if (uploadedFiles.Any())
            {
                var list = new List<UploadRequest>();
                foreach (var uploaded in uploadedFiles)
                {
                    try
                    {
                        var filestream = uploaded.File.OpenReadStream(MAXALLOWEDSIZE);
                        var imgstream = new MemoryStream();
                        await filestream.CopyToAsync(imgstream);
                        imgstream.Position = 0;
                        using (var outStream = new MemoryStream())
                        {
                            using (var image = Image.Load(imgstream, out IImageFormat format))
                            {
                                var scale = 0m;
                                if (image.Width > 1600)
                                {
                                    scale = 0.3m;
                                }
                                else if (image.Width <= 1600 && image.Width > 800)
                                {
                                    scale = 0.5m;
                                }
                                else
                                {
                                    scale = 0.9m;
                                }
                                image.Mutate(
                                   i => i.AutoOrient().Resize(Convert.ToInt32((image.Width * scale)), 0));
                                image.Save(outStream, format);
                            }
                            var request = new UploadRequest(uploaded.FileName, UploadType.Document, outStream.ToArray());
                            list.Add(request);
                        }
                    }
                    catch (Exception e)
                    {
                        Snackbar.Add($"{e.Message}", MudBlazor.Severity.Error);
                    }
                

                }
                var uploadcommand = new UploadDocumentCommand(list);
                await _mediator.Send(uploadcommand);
                await Clear();
                MudDialog.Close(DialogResult.Ok(true));
            }
        }
        finally
        {
            _processing = false;
        }
    }
    void Cancel() => MudDialog.Cancel();
    async Task Clear()
    {
        await _js.InvokeVoidAsync("clearInput", "fileInput");
        uploadedFiles = new();
    }
    record FileUploadProgress(string FileName, long Size, IBrowserFile File)
    {
        public long UploadedBytes { get; set; }
        public double UploadedPercentage => (double)UploadedBytes / (double)Size * 100d;
    }
}
