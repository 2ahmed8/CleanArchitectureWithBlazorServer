@using Microsoft.AspNetCore.Components.Web
@using Blazor.Server.UI
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="~/" />
    <link href="css/app.css" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" rel="stylesheet" />
    <link href="_content/MudBlazor/MudBlazor.min.css" rel="stylesheet" />
    <link href="_content/CodeBeam.MudExtensions/MudExtensions.min.css" rel="stylesheet" />
    <link href="_content/Blazor-ApexCharts/css/apexcharts.css" rel="stylesheet" />
    <style>
        .mud-input {
            font-size: 0.8125rem;
        }

        .mud-input-control > .mud-input-control-input-container > .mud-input-label-inputcontrol {
            font-size: 0.8125rem;
        }

        .mud-button-year {
            font-size: 0.8125rem;
        }

        #blazor-error-ui {
            background: lightyellow;
            background-color: var(--mud-palette-error);
            color: var(--mud-palette-error-text);
            bottom: 0;
            box-shadow: 0 -1px 2px rgba(0, 0, 0, 0.2);
            display: none;
            left: 0;
            padding: 0.6rem 1.25rem 0.7rem 1.25rem;
            padding: 0.6rem 1.75rem 0.7rem 1.25rem;
            position: fixed;
            width: 100%;
            z-index: 9999;
        }

        #reconnect-modal {
            background: lightyellow;
            background-color: var(--mud-palette-warning-hover);
            color: var(--mud-palette-warning-darken);
            top: 0;
            box-shadow: 0 -1px 2px rgba(0, 0, 0, 0.2);
            display: none;
            left: 0;
            padding: 0.6rem 1.25rem 0.7rem 1.25rem;
            padding: 0.6rem 1.75rem 0.7rem 1.25rem;
            margin:0px;
            position: fixed;
            width: 100%;
            z-index: 9999;
        }
    </style>
    <component type="typeof(HeadOutlet)" render-mode="Server" />
</head>
<body>
    <div id="reconnect-modal" style="display: none;">Connection lost -- please wait, attempting to reconnect</div>
    @RenderBody()
    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">ðŸ—™</a>
    </div>

    <script type="text/javascript" src="https://alcdn.msauth.net/browser/2.23.0/js/msal-browser.min.js"></script>
    <script src="~/js/msal/authConfig.js"></script>

    <script src="https://accounts.google.com/gsi/client"></script>
    <script src="~/js/gapi/auth2config.js"></script>
    <script src="_content/Blazor-ApexCharts/js/apex-charts.min.js"></script>
    <script src="_content/Blazor-ApexCharts/js/blazor-apex-charts.js"></script>
    <script src="_framework/blazor.server.js" autostart="false"></script>
    <script src="~/js/boot.js"></script>
    <script src="_content/MudBlazor/MudBlazor.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/openseadragon/4.0.0/openseadragon.min.js"></script>
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/d3-org-chart@2"></script>
    <script src="https://cdn.jsdelivr.net/npm/d3-flextree@2.1.2/build/d3-flextree.js"></script>

    <script type="text/javascript">

        async function externalLogin(provider, dotNetHelper) {
            if (provider == 'Microsoft') {
                await loginWithMicrosoft(provider, dotNetHelper);
            } else if (provider == 'Google') {
                await loginWithGoogle(provider, dotNetHelper);
            }

        }
        async function loginWithMicrosoft(provider, dotNetHelper) {
            var client = new msal.PublicClientApplication(msalConfig);
            var response = await client.loginPopup(loginRequest);
            await dotNetHelper.invokeMethodAsync('ConfirmExternal', provider, response.account.username, response.account.name, response.accessToken);
            console.log('login with microsoft success');
            localStorage.setItem('microsoft_client_token', response.account.homeAccountId);
        }
        async function loginWithGoogle(provider, dotNetHelper) {
            console.log(provider + 'initialize');
            client = google.accounts.oauth2.initTokenClient({
                client_id: auth2Config.clientId,
                scope: auth2Config.scope,
                ux_mode: 'popup',
                callback: async (response) => {
                    const access_token = response.access_token;
                    const url = `https://www.googleapis.com/oauth2/v3/userinfo?access_token=${access_token}`;
                    const data = await fetch(url).then((response) => response.json());
                    await dotNetHelper.invokeMethodAsync('ConfirmExternal', provider, data.email, data.name, access_token);
                    console.log('login with microsoft success');
                    localStorage.setItem('google_client_token', access_token);

                }
            });
            client.requestAccessToken();
        }
        async function externalLogout() {
            let client_token = localStorage.getItem('microsoft_client_token');
            if (client_token) {
                const client = new msal.PublicClientApplication(msalConfig);
                const logoutRequest = {
                    account: client.getAccountByHomeId(client_token)
                }

                await client.logoutPopup(logoutRequest);
                localStorage.removeItem('microsoft_client_token');
            } else {
                client_token = localStorage.getItem('google_client_token');
                if (client_token) {
                    google.accounts.oauth2.revoke(client_token);
                    localStorage.removeItem('google_client_token');
                }
            }
        }


        async function showOpenSeadragon(element, url) {
            console.log('showOpenSeadragon');
            var viewer = OpenSeadragon({
                id: element,
                showNavigator: false,
                showZoomControl: false,
                showHomeControl: false,
                showFullPageControl: false,
                showSequenceControl: false,
                maxZoomPixelRatio: 3,
                minZoomImageRatio: 0.3,
                tileSources: {
                    xmlns: "http://schemas.microsoft.com/deepzoom/2008",
                    type: 'image',
                    url: url,
                }
            });
            console.log(viewer);
        }

        function clearInput(inputId) {
            setTimeout(function () {
                var input = document.querySelector("#" + inputId);
                if (input) {
                    input.value = "";
                }
            }, 30);
        }
        var chart;
        async function createOrgChart(orgdata) {
            setTimeout(function () {
                console.log(orgdata)
                const activeid = orgdata.find(x => x.isLoggedUser == true);
                chart = new d3.OrgChart()
                    .container('.chart-container')
                    .data(orgdata)
                    .nodeHeight((d) => 85)
                    .nodeWidth((d) => {
                        return 220;
                    })
                    .childrenMargin((d) => 50)
                    .compactMarginBetween((d) => 25)
                    .compactMarginPair((d) => 50)
                    .neightbourMargin((a, b) => 25)
                    .siblingsMargin((d) => 25)
                    .buttonContent(({ node, state }) => {
                        return `<div style="px;color:#716E7B;border-radius:5px;padding:4px;font-size:10px;margin:auto auto;background-color:white;border: 1px solid #E4E2E9"> <span style="font-size:9px">${node.children
                            ? `<i class="fas fa-angle-up"></i>`
                            : `<i class="fas fa-angle-down"></i>`
                            }</span> ${node.data._directSubordinates}  </div>`;
                    })
                    .linkUpdate(function (d, i, arr) {
                        d3.select(this)
                            .attr('stroke', (d) =>
                                d.data._upToTheRootHighlighted ? '#152785' : '#E4E2E9'
                            )
                            .attr('stroke-width', (d) =>
                                d.data._upToTheRootHighlighted ? 5 : 1
                            );

                        if (d.data._upToTheRootHighlighted) {
                            d3.select(this).raise();
                        }
                    })
                    .nodeContent(function (d, i, arr, state) {
                        const color = '#FFFFFF';
                        return `
                            <div style="font-family: 'Inter', sans-serif;background-color:${color}; position:absolute;margin-top:-1px; margin-left:-1px;width:${d.width}px;height:${d.height}px;border-radius:10px;border: 1px solid #E4E2E9">
                               <div style="background-color:${color};position:absolute;margin-top:-25px;margin-left:${15}px;border-radius:100px;width:50px;height:50px;" ></div>
                               <img src=" ${d.data.imageUrl
                            }" style="position:absolute;margin-top:-20px;margin-left:${20}px;border-radius:100px;width:40px;height:40px;" />

                              <div style="color:#08011E;position:absolute;right:20px;top:17px;font-size:10px;"><i class="fas fa-ellipsis-h"></i></div>

                              <div style="font-size:15px;color:#08011E;margin-left:20px;margin-top:32px"> ${d.data.name
                            } </div>
                              <div style="color:#716E7B;margin-left:20px;margin-top:3px;font-size:10px;"> ${d.data.positionName
                            } </div>


                           </div>
                  `;
                    })
                    .render();

                if (activeid != null) {
                    console.log(activeid)
                    chart.setHighlighted(activeid.id).render();
                }
            }, 50);
        }
    </script>

</body>
</html>
