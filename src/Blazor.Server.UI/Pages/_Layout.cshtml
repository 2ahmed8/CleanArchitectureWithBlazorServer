@using Microsoft.AspNetCore.Components.Web
@using Blazor.Server.UI
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="~/" />
    <link href="css/app.css" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" rel="stylesheet" />
    <link href="_content/MudBlazor/MudBlazor.min.css" rel="stylesheet" />
    <style>
        .mud-input {
            font-size: 0.8125rem;
        }

        .mud-input-control > .mud-input-control-input-container > .mud-input-label-inputcontrol {
            font-size: 0.8125rem;
        }

        .mud-button-year {
            font-size: 0.8125rem;
        }
    </style>
    <component type="typeof(HeadOutlet)" render-mode="ServerPrerendered" />
</head>
<body>
    @RenderBody()

    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">ðŸ—™</a>
    </div>
    <script type="text/javascript" src="https://alcdn.msauth.net/browser/2.23.0/js/msal-browser.min.js"></script>
    <script src="~/js/msal/authConfig.js"></script>
    <script src="https://accounts.google.com/gsi/client" ></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jsrsasign/8.0.20/jsrsasign-all-min.js"></script>
    <script src="~/js/gapi/auth2config.js"></script>

    <script src="_framework/blazor.server.js"></script>
    <script src="_content/MudBlazor/MudBlazor.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>
    <script src="~/js/apex-chart-wrapper.js"></script>
    <script type="text/javascript">

              async function downloadFileFromStream(fileName, contentStreamReference) {
                  const arrayBuffer = await contentStreamReference.arrayBuffer();
                  const blob = new Blob([arrayBuffer]);
                  const url = URL.createObjectURL(blob);

                  triggerFileDownload(fileName, url);

                  URL.revokeObjectURL(url);
              }

              function triggerFileDownload(fileName, url) {
                  const anchorElement = document.createElement('a');
                  anchorElement.href = url;
                  anchorElement.download = fileName ?? '';
                  anchorElement.click();
                  anchorElement.remove();
              }


             async function externalLogin(provider, dotNetHelper) {
                 if(provider=='Microsoft'){
                     await loginWithMicrosoft(provider,dotNetHelper);
                 }else if(provider=='Google') {
                     await loginWithGoogle(provider,dotNetHelper);
                 }

             }
             async function loginWithMicrosoft(provider, dotNetHelper){
                  var client = new msal.PublicClientApplication(msalConfig);
                  var response = await client.loginPopup(loginRequest);
                  console.log(response);
                  await dotNetHelper.invokeMethodAsync('ConfirmExternal', provider, response.account.username, response.account.name, response.accessToken);
                  console.log('login with microsoft success');
             }
             async function loginWithGoogle(provider, dotNetHelper) {
                 google.accounts.id.initialize({
                                ux_mode:'popup',
                                client_id: auth2Config.clientId,
                                callback: async function(response){
                                     console.log(response)
                                     const responsePayload = decodeJwtResponse(response.credential);
                                     console.log("ID: " + responsePayload.sub);
                                     console.log('Full Name: ' + responsePayload.name);
                                     console.log('Given Name: ' + responsePayload.given_name);
                                     console.log('Family Name: ' + responsePayload.family_name);
                                     console.log("Image URL: " + responsePayload.picture);
                                     console.log("Email: " + responsePayload.email);
                                     await dotNetHelper.invokeMethodAsync('ConfirmExternal', provider, responsePayload.email, responsePayload.given_name, response.accessToken);
                                     console.log('login with google success');
                                } 
                        });
                        google.accounts.id.prompt();
             }
             function decodeJwtResponse(credential){
                         var a = credential.split(".");
                         var uHeader = b64utos(a[0]);
                         var uClaim = b64utos(a[1]);
                         var pHeader = KJUR.jws.JWS.readSafeJSONString(uHeader);
                         var pClaim = KJUR.jws.JWS.readSafeJSONString(uClaim);
                         return pClaim
                   }
    </script>

</body>
</html>
