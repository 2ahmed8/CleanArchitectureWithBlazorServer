@page "/pages/products"
@using CleanArchitecture.Blazor.Application.Features.Products.DTOs
@using CleanArchitecture.Blazor.Application.Features.Products.Queries.Pagination

@inject IStringLocalizer<Products> L
<MudTable ServerData="@(new Func<TableState, Task<TableData<ProductDto>>>(ServerReload))"
          Loading="@_loading"
          Hover="true" @ref="_table">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Products</MudText>
        <MudSpacer />
        <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortLabel="Name" T="ProductDto">@L["Product Name"]</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="Unit" T="ProductDto">@L["Price"]</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="Unit" T="ProductDto">@L["Unit"]</MudTableSortLabel></MudTh>
       
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">
            <MudText>@context.Name</MudText>
            <MudText Typo="Typo.body2">@context.Description</MudText>
        </MudTd>
        <MudTd DataLabel="Price">@context.Price</MudTd>
        <MudTd DataLabel="Unit">@context.Unit</MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    private IEnumerable<ProductDto> _pagedData;
    private MudTable<ProductDto> _table;
    private int _totalItems;
    private string _searchString = string.Empty;
    private bool _loading;
    [Inject]
    private ISender _mediator { get; set; } = default!;

    private async Task<TableData<ProductDto>> ServerReload(TableState state)
    {
        _loading = true;
        var request = new ProductsWithPaginationQuery()
            {
                Keyword = _searchString,
                OrderBy = string.IsNullOrEmpty(state.SortLabel)?"Id":state.SortLabel,
                SortDirection = (state.SortDirection== SortDirection.None?SortDirection.Descending.ToString():state.SortDirection.ToString()),
                PageNumber = state.Page + 1,
                PageSize = state.PageSize
            };
        var result = await _mediator.Send(request);
        _loading = false;
        return  new TableData<ProductDto>() { TotalItems = result.TotalItems, Items = result.Items };
    
    }
    private async Task OnSearch(string text)
    {
        _searchString = text;
        await _table.ReloadServerData();
    }
}
