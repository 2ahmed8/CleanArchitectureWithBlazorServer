@using CleanArchitecture.Blazor.Application.Features.KeyValues.Commands.AddEdit;
@using SixLabors.ImageSharp
@using SixLabors.ImageSharp.Formats
@using SixLabors.ImageSharp.Processing
@inherits MudComponentBase
@inject IStringLocalizer<Dictionaries> L
<MudDialog>
    <DialogContent>
        <MudForm Model="model" @ref="_form" Validation="@(modelValidator.ValidateValue)">
            <MudGrid>
                <MudItem xs="12" md="6">
                    <MudEnumSelect Label="@L["Name"]" @bind-Value="model.Name"
                                   For="@(() => model.Name)"
                                   Required="true"
                                   RequiredError="@L["Name is required!"]">
                    </MudEnumSelect>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField Label="@L["Description"]" @bind-Value="model.Description"
                                  For="@(() => model.Description)">
                    </MudTextField>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField Label="@L["Value"]" @bind-Value="model.Value"
                                  For="@(() => model.Value)"
                                  Required="true"
                                  RequiredError="@L["Value is required!"]">
                    </MudTextField>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField Label="@L["Text"]" @bind-Value="model.Text"
                                  For="@(() => model.Text)"
                                  Required="true"
                                  RequiredError="@L["Text is required!"]">
                    </MudTextField>
                </MudItem>

            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">@ConstantString.CANCEL</MudButton>
        <MudLoadingButton Loading="@_saving" Color="MudBlazor.Color.Primary" OnClick="Submit">@ConstantString.SAVE</MudLoadingButton>
    </DialogActions>
</MudDialog>

@code {
    MudForm? _form = default!;
    bool _saving = false;
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = default!;
    AddEditKeyValueCommandValidator modelValidator = new AddEditKeyValueCommandValidator();
    [EditorRequired][Parameter] public AddEditKeyValueCommand model { get; set; } = default!;
    [Inject]
    private IMediator _mediator { get; set; } = default!;
    async Task Submit()
    {
        try
        {
            _saving = true;
            await _form!.Validate().ConfigureAwait(false);
            if (!_form!.IsValid)
                return;
            var result = await _mediator.Send(model);

            if (result.Succeeded)
            {
                MudDialog.Close(DialogResult.Ok(true));
                Snackbar.Add(ConstantString.SAVESUCCESS, MudBlazor.Severity.Info);
            }
            else
            {
                Snackbar.Add(result.ErrorMessage, MudBlazor.Severity.Error);
            }
        }
        finally
        {
            _saving = false;
        }
    }
    void Cancel() => MudDialog.Cancel();
}
