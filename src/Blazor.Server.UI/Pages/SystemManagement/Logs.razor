@page "/system/logs"
@using Blazor.Server.UI.Pages.SystemManagement.Components
@using CleanArchitecture.Blazor.Application.Features.Loggers.Commands.Delete;
@using CleanArchitecture.Blazor.Application.Features.Loggers.DTOs
@using CleanArchitecture.Blazor.Application.Features.Loggers.Queries.ChatData
@using CleanArchitecture.Blazor.Application.Logs.Queries.PaginationQuery

@attribute [Authorize(Policy = Permissions.Logs.View)]
@inject IStringLocalizer<Logs> L
<PageTitle>@L[Title]</PageTitle>
<style>
    .mud-table-toolbar {
        height: 120px !important;
    }
</style>
<ErrorBoundary>
    <ChildContent>
        <Blazor.Server.UI.Pages.SystemManagement.Components.LogsLineCharts @ref="chartcomponent" Data="_data"></Blazor.Server.UI.Pages.SystemManagement.Components.LogsLineCharts>
        <MudTable ServerData="@(new Func<TableState, Task<TableData<LogDto>>>(ServerReload))"
                  FixedHeader="true"
                  FixedFooter="true"
                  Virtualize="true"
                  Height="calc(100vh - 360px)"
                  Style="min-height:700px"
                  Loading="@_loading"
                  SortLabel="@ConstantString.ORDERBY"
                  Hover="true" @ref="_table">
            <ToolBarContent>
                <div class="d-flex align-start flex-grow-1">
                    <div class="d-flex gap-4">
                        <MudIcon Icon="@Icons.Material.Filled.BarChart" Size="Size.Large" />
                        <div class="d-flex flex-column">
                            <MudText Typo="Typo.caption">@L["Logs"]</MudText>
                            <MudEnumSelect Style="min-width:220px" TEnum="LogListView" ValueChanged="OnChangedListView" Value="_query.ListView" Dense="true" Label="List View">
                            </MudEnumSelect>
                        </div>
                    </div>
                    <div class="flex-grow-1" />

                    <div class="d-flex flex-column justify-end">
                        <div class="d-flex">
                            <MudButton DisableElevation Variant="Variant.Outlined"
                                       Size="Size.Small"
                                       Disabled="@_loading"
                                       OnClick="@(()=>OnRefresh())"
                                       StartIcon="@Icons.Material.Filled.Refresh" IconColor="Color.Surface" Color="Color.Primary"
                                       Style="margin-right: 5px;">@ConstantString.REFRESH</MudButton>
                            @if (_canPurge)
                            {
                                <MudButton DisableElevation Variant="Variant.Outlined"
                                       Size="Size.Small"
                                       Disabled="@(_loading || _clearing)"
                                       OnClick="@(()=>OnPurge())"
                                       StartIcon="@Icons.Material.Filled.ClearAll" IconColor="Color.Surface" Color="Color.Secondary"
                                       Style="margin-right: 5px;">
                                @if (_clearing)
                                    {
                                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                        <MudText Class="ms-2">waiting</MudText>
                                    }
                                    else
                                    {
                                        <MudText> @ConstantString.CLEAR </MudText>
                                    }

                                </MudButton>
                            }
                        </div>

                        <MudTextField T="string" Style="min-width:300px" ValueChanged="@(s=>OnSearch(s))" Value="@_query.Keyword" Placeholder="Search" Adornment="Adornment.End"
                                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>


                    </div>
                </div>

            </ToolBarContent>
            <ColGroup>
                <MudHidden Breakpoint="Breakpoint.SmAndDown">
                    <col style="width:180px;" />
                    <col style="width:120px;" />
                    <col style="width:90px;" />
                    <col />
                    <col />
                </MudHidden>
            </ColGroup>
            <HeaderContent>
                <MudTh>@ConstantString.ACTIONS</MudTh>
                <MudTh><MudTableSortLabel SortLabel="TimeStamp" T="LogDto">@L["Time Stamp"]</MudTableSortLabel></MudTh>
                <MudTh Style="text-align:center"><MudTableSortLabel SortLabel="Level" T="LogDto">@L["Level"]</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="Message" T="LogDto">@L["Message"]</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="UserName" T="LogDto">@L["User Name"]</MudTableSortLabel></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="@ConstantString.ACTIONS">
                    <MudButton Variant="Variant.Filled" DisableElevation="true"
                               OnClick="@(() => OnShowDetail(context))"
                               StartIcon="@(context.ShowDetails == true?Icons.Material.Filled.Close:Icons.Material.Filled.Add)" IconColor="Color.Secondary" Size="Size.Small"
                               Color="Color.Surface">
                        @L[((context.ShowDetails == true) ? "Hide" : "Show") + " Details"]
                    </MudButton>
                </MudTd>
                <MudTd DataLabel="@L["Time Stamp"]">
                    @context.TimeStamp.ToString("yyyy-MM-dd HH:mm:ss")
                </MudTd>
                <MudTd Style="text-align:center" DataLabel="@L["Level"]">
                    @switch (context.Level)
                    {
                        case "Trace":
                            <MudChip Label="true">@context.Level</MudChip>
                            break;
                        case "Debug":
                            <MudChip Label="true">@context.Level</MudChip>
                            break;
                        case "Information":
                            <MudChip Color="Color.Info" Label="true">@context.Level</MudChip>
                            break;
                        case "Warning":
                            <MudChip Color="Color.Warning" Label="true">@context.Level</MudChip>
                            break;
                        case "Error":
                            <MudChip Color="Color.Error" Label="true">@context.Level</MudChip>
                            break;
                        case "Critical":
                            <MudChip Color="Color.Error" Label="true">@context.Level</MudChip>
                            break;
                        default:
                            <MudChip Label="true">@context.Level</MudChip>
                            break;
                    }

                </MudTd>
                <MudTd DataLabel="@L["Message"]">
                    @context.Message
                </MudTd>
                <MudTd DataLabel="@L["User Name"]">
                    @context.UserName
                </MudTd>
            </RowTemplate>
            <ChildRowContent>
                @if (context.ShowDetails)
                {
                    <MudTr>
                        <td colspan="5">
                            <MudCard Elevation="0">
                                <MudCardHeader>
                                    <CardHeaderContent>
                                        <MudText Typo="Typo.body1"><strong>@context.Level</strong></MudText>
                                    </CardHeaderContent>
                                </MudCardHeader>
                                <MudCardContent Class="pt-0">
                                    <MudText>Message</MudText>
                                    <MudText Typo="Typo.body2">@context.Message</MudText>
                                    @if (!string.IsNullOrEmpty(context.Exception))
                                    {
                                        <MudText Color="Color.Error">Exception</MudText>
                                        <MudText Color="Color.Warning" Typo="Typo.body2">@context.Exception</MudText>
                                    }
                                    <MudText>Client IP</MudText>
                                    <MudText Typo="Typo.body2">@context.ClientIP</MudText>
                                </MudCardContent>
                            </MudCard>
                        </td>
                    </MudTr>
                }
            </ChildRowContent>
            <NoRecordsContent>
                <MudText>@ConstantString.NOMACHING</MudText>
            </NoRecordsContent>
            <LoadingContent>
                <MudText>@ConstantString.LOADING</MudText>
            </LoadingContent>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </ChildContent>
    <ErrorContent>
        <CustomError Exception="context"></CustomError>
    </ErrorContent>
</ErrorBoundary>
@code {
    private LogsLineCharts? chartcomponent;
    public string Title { get; private set; } = "Logs";
    private string _searchString = string.Empty;
    private MudTable<LogDto> _table = default!;

    public List<LogTimeLineDto> _data { get; set; } = new();
    [CascadingParameter]
    private Task<AuthenticationState> _authState { get; set; } = default!;
    private bool _loading;
    private bool _clearing;
    [Inject]
    private IMediator _mediator { get; set; } = default!;
    private bool _canPurge;
    private LogsWithPaginationQuery _query = new();
    protected override async void OnInitialized()
    {
        Title = L["Logs"];
        var state = await _authState;
        _canPurge = (await AuthService.AuthorizeAsync(state.User, Permissions.Logs.Purge)).Succeeded;
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _data = await _mediator.Send(new LogsTimeLineChatDataQuery());
            StateHasChanged();
            await chartcomponent!.RenderChart();

        }
    }

    private async Task<TableData<LogDto>> ServerReload(TableState state)
    {
        try
        {
            _loading = true;
            _query.Sort = string.IsNullOrEmpty(state.SortLabel) ? "Id" : state.SortLabel;
            _query.SortBy = (state.SortDirection == SortDirection.Ascending ? AutoFilterer.Enums.Sorting.Ascending : AutoFilterer.Enums.Sorting.Descending);
            _query.Page = state.Page + 1;
            _query.PerPage = state.PageSize;
            var result = await _mediator.Send(_query).ConfigureAwait(false);
            return new TableData<LogDto>() { TotalItems = result.TotalItems, Items = result.Items };
        }
        finally
        {
            _loading = false;
        }
    }
    private async Task OnChangedListView(LogListView listview)
    {
        _query.ListView = listview;
        await _table.ReloadServerData();
    }
    private async Task OnSearch(string text)
    {
       _query.Keyword = text;
        await _table.ReloadServerData();
    }
    private async Task OnRefresh()
    {
        _query.Keyword = string.Empty;
        await _table.ReloadServerData();
    }
    private Task OnShowDetail(LogDto dto)
    {
        dto.ShowDetails = !dto.ShowDetails;
        return Task.CompletedTask;
    }
    private async Task OnPurge()
    {
        var parameters = new DialogParameters
                        {
                    { nameof(ConfirmationDialog.ContentText), $"{L["Are you sure you want to erase all the logs?"]}" }
                        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true, DisableBackdropClick = true };
        var dialog = DialogService.Show<ConfirmationDialog>
        ($"{L["Erase logs"]}", parameters, options);
        var state = await dialog.Result;
        if (!state.Canceled)
        {
            _clearing = true;
            try
            {
                var command = new ClearLogsCommand();
                var result = await _mediator.Send(command);
                await _table.ReloadServerData();
                Snackbar.Add(L["Logs are erased"], MudBlazor.Severity.Info);
            }
            finally
            {
                _clearing = false;
            }

        }
    }
}
