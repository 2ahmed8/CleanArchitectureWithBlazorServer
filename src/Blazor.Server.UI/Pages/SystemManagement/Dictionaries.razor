@page "/system/dictionaries"
@using Blazor.Server.UI.Components.Dialogs
@using CleanArchitecture.Blazor.Application.Features.KeyValues.Commands.Delete
@using CleanArchitecture.Blazor.Application.Features.KeyValues.DTOs
@using CleanArchitecture.Blazor.Application.Features.KeyValues.Queries.ByName
@attribute [Authorize(Policy = Permissions.Roles.View)]
@inject IStringLocalizer<Dictionaries> L
<PageTitle>@Title</PageTitle>
<style>
    .mud-table-toolbar {
        height: 84px !important;
    }
</style>
<ErrorBoundary>
    <ChildContent>

        <MudTable Items="@KeyValueList"
                  FixedHeader="true"
                  FixedFooter="true"
                  Height="calc(100vh - 265px)"
                  Hover="true"
                  MultiSelection="true"
                  SelectedItems="@_selectedItems"
                  SortLabel="@L["Sort By"]"
                  Filter="new Func<KeyValueDto,bool>(_quickFilter)">
            <ToolBarContent>
                <div class="justify-start pt-3">
                    <MudText Typo="Typo.h6">Roles</MudText>
                    <MudButton DisableElevation Variant="Variant.Outlined"
                               Size="Size.Small"
                               OnClick="OnRefresh"
                               StartIcon="@Icons.Material.Filled.Refresh" IconColor="Color.Surface" Color="Color.Primary"
                               Style="margin-right: 5px;">@L["Refresh"]</MudButton>
                    @if (_canCreate)
                    {
                        <MudButton DisableElevation Variant="Variant.Outlined" Color="Color.Primary"
                               StartIcon="@Icons.Material.Filled.Add"
                               Size="Size.Small"
                               OnClick="OnCreate"
                               Style="margin-right: 5px;"
                               IconColor="Color.Surface">@L["Create"]</MudButton>
                    }
                    @if (_canDelete)
                    {
                        <MudButton DisableElevation Variant="Variant.Outlined" Color="Color.Error"
                               StartIcon="@Icons.Material.Filled.Delete"
                               Disabled="@(!(_selectedItems.Count>0))"
                               OnClick="OnDeleteChecked"
                               Size="Size.Small"
                               Style="margin-right: 5px;"
                               IconColor="Color.Surface">@L["Delete"]</MudButton>
                    }
                    @if (_canImport)
                    {
                        <MudButton DisableElevation Variant="Variant.Outlined" Color="Color.Primary"
                               StartIcon="@Icons.Material.Filled.Upload"
                               Size="Size.Small"
                               Style="margin-right: 5px;"
                               IconColor="Color.Surface">@L["Import Data"]</MudButton>
                    }
                    @if (_canExport)
                    {
                        <MudButton DisableElevation Variant="Variant.Outlined" Color="Color.Primary"
                               StartIcon="@Icons.Material.Filled.Download"
                               Size="Size.Small"
                               Style="margin-right: 5px;"
                               IconColor="Color.Surface">@L["Export Data"]</MudButton>
                    }
                </div>
                <MudSpacer />
                @if (_canSearch)
                {
                    <MudTextField @bind-Value="_searchString" Immediate="true" FullWidth="false"
                              Placeholder="@(L["Search for role name"])" Adornment="Adornment.End"
                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 mb-3">
                    </MudTextField>
                }
            </ToolBarContent>
            <ColGroup>
                <col style="width:50px;" />

            </ColGroup>
            <HeaderContent>
          
                <MudTh><MudTableSortLabel SortBy="new Func<KeyValueDto, object>(x=>x.Name)">@L["Name"]</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<KeyValueDto, object>(x=>x.Value)">@L["Value"]</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<KeyValueDto, object>(x=>x.Text)">@L["Text"]</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<KeyValueDto, object>(x=>x.Description)">@L["Description"]</MudTableSortLabel></MudTh>
            </HeaderContent>
            <RowTemplate>
                
                <MudTd DataLabel="Name">@context.Name</MudTd>
                <MudTd DataLabel="Value">@context.Value</MudTd>
                <MudTd DataLabel="Text">@context.Text</MudTd>
                <MudTd DataLabel="Description">@context.Description</MudTd>

            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </ChildContent>
    <ErrorContent>
        <MudAlert Class="mt-auto" Severity="MudBlazor.Severity.Warning">Oopsie !! ðŸ˜” @context.GetBaseException().Message</MudAlert>
    </ErrorContent>
</ErrorBoundary>

@code {
    public string Title { get; set; } = "Dictionaries";
    private IList<KeyValueDto> KeyValueList = new List<KeyValueDto>();
    private HashSet<KeyValueDto> _selectedItems = new HashSet<KeyValueDto>();
    private string _searchString=string.Empty;
    private bool _sortNameByLength;
    [CascadingParameter]
    private Task<AuthenticationState> AuthState { get; set; } = default!;
    [Inject]
    private ISender _mediator { get; set; } = default!;
    private bool _canCreate;
    private bool _canSearch;
    private bool _canEdit;
    private bool _canDelete;
    private bool _canImport;
    private bool _canExport;
    protected override async Task OnInitializedAsync()
    {
        var state = await AuthState;
        _canCreate = (await AuthService.AuthorizeAsync(state.User, Permissions.Dictionaries.Create)).Succeeded;
        _canSearch = (await AuthService.AuthorizeAsync(state.User, Permissions.Dictionaries.Search)).Succeeded;
        _canEdit = (await AuthService.AuthorizeAsync(state.User, Permissions.Dictionaries.Edit)).Succeeded;
        _canDelete = (await AuthService.AuthorizeAsync(state.User, Permissions.Dictionaries.Delete)).Succeeded;
        _canImport = (await AuthService.AuthorizeAsync(state.User, Permissions.Dictionaries.Import)).Succeeded;
        _canExport = (await AuthService.AuthorizeAsync(state.User, Permissions.Dictionaries.Export)).Succeeded;

        await LoadData();
    }
    private bool _quickFilter(KeyValueDto dto) => FilterFunc(dto, _searchString);

    private bool FilterFunc(KeyValueDto dto, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (dto.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (dto.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{dto.Value} {dto.Text}".Contains(searchString))
            return true;
        return false;
    }
    private async Task LoadData()
    {
        var cmd = new GetAllKeyValuesQuery();
        KeyValueList = await _mediator.Send(cmd);
    }
    private async Task OnRefresh()
    {
        _searchString = string.Empty;
        await LoadData();
    }
     private async Task OnDeleteChecked()
    {
        var deleteContent = L["You're sure you want to delete the selected items:{0}?"];
        var parameters = new DialogParameters
        {
            { nameof(DeleteConfirmation.ContentText), string.Format(deleteContent,_selectedItems.Count) }
        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true, DisableBackdropClick = true };
        var dialog = DialogService.Show<DeleteConfirmation>(L["Delete"], parameters, options);
        var state = await dialog.Result;
        if (!state.Cancelled)
        {
            var command = new DeleteCheckedKeyValuesCommand() { Id = _selectedItems.Select(x => x.Id).ToArray() };
            var result = await _mediator.Send(command);
            await LoadData();
            Snackbar.Add($"Deleted successfully", MudBlazor.Severity.Info);
        }
    }
    private Task OnCreate()
    {
        return Task.CompletedTask;
    }
}
