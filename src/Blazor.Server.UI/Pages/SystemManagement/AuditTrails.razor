@page "/system/audittrails"
@using CleanArchitecture.Blazor.Application.Features.AuditTrails.Caching;
@using CleanArchitecture.Blazor.Application.Features.AuditTrails.DTOs
@using CleanArchitecture.Blazor.Application.Features.AuditTrails.Queries.PaginationQuery


@attribute [Authorize(Policy = Permissions.AuditTrails.View)]
@inject IStringLocalizer<AuditTrails> L
<PageTitle>@L[Title]</PageTitle>
<style>
    .mud-table-toolbar {
        height: 120px !important;
    }
</style>
<ErrorBoundary>
    <ChildContent>
        <MudTable ServerData="@(new Func<TableState, Task<TableData<AuditTrailDto>>>(ServerReload))"
                  FixedHeader="true"
                  FixedFooter="true"
                  Virtualize="true"
                  @bind-RowsPerPage="_defaultPageSize"
                  Height="calc(100vh - 300px)"
                  Loading="@_loading"
                  SortLabel="@ConstantString.ORDERBY"
                  Hover="true" @ref="_table">
            <ToolBarContent>
                <div class="d-flex align-start flex-grow-1">
                    <div class="d-flex gap-4">
                        <MudIcon Icon="@Icons.Material.Filled.ReceiptLong" Size="Size.Large" />
                        <div class="d-flex flex-column">
                            <MudText Typo="Typo.caption">@L[Title]</MudText>
                            <MudEnumSelect Style="min-width:220px" TEnum="AuditTrailListView" ValueChanged="OnChangedListView" Value="_query.ListView" Dense="true" Label="List View">
                            </MudEnumSelect>
                        </div>
                    </div>
                    <div class="flex-grow-1" />

                    <div class="d-flex flex-column justify-end">
                        <div class="d-flex">
                            <MudButton DisableElevation Variant="Variant.Outlined"
                                       Size="Size.Small"
                                       OnClick="@(()=>OnRefresh())"
                                       StartIcon="@Icons.Material.Filled.Refresh" IconColor="Color.Surface" Color="Color.Primary"
                                       Style="margin-right: 5px;">@ConstantString.REFRESH</MudButton>
                        </div>

                        <MudStack Row="true" AlignItems="AlignItems.Stretch">
                            <MudEnumSelect TEnum="AuditType?" Placeholder="Search for audit type" Value="@_query.AuditType" Clearable="true" ValueChanged="@(s=>OnSearch(s))" Style="width:160px" FullWidth="true"> </MudEnumSelect>
                            <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Value="@_query.Keyword" Placeholder="Search" Adornment="Adornment.End" Style="width:260px" FullWidth="true"
                                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small"></MudTextField>
                        </MudStack>


                    </div>
                </div>
            </ToolBarContent>
            <ColGroup>
                <MudHidden Breakpoint="Breakpoint.SmAndDown">
                    <col style="width:180px;" />
                </MudHidden>
            </ColGroup>
            <HeaderContent>
                <MudTh Style="width:190px">@ConstantString.ACTIONS</MudTh>
                <MudTh><MudTableSortLabel SortLabel="UserId" T="AuditTrailDto">@L["User Id"]</MudTableSortLabel></MudTh>
                <MudTh Style="text-align:center"><MudTableSortLabel SortLabel="AuditType" T="AuditTrailDto">@L["Audit Type"]</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="TableName" T="AuditTrailDto">@L["Table Name"]</MudTableSortLabel></MudTh>
                <MudTh>@L["Primary Key"]</MudTh>
                <MudTh><MudTableSortLabel SortLabel="DateTime" T="AuditTrailDto">@L["Date Time"]</MudTableSortLabel></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="@ConstantString.ACTIONS">
                    <MudButton Variant="Variant.Filled" DisableElevation="true"
                               OnClick="@(() => OnShowDetail(context))"
                               StartIcon="@(context.ShowDetails == true?Icons.Material.Filled.Close:Icons.Material.Filled.Add)" IconColor="Color.Secondary" Size="Size.Small"
                               Color="Color.Surface">
                        @L[((context.ShowDetails == true) ? "Hide" : "Show") + " Details"]
                    </MudButton>
                </MudTd>
                <MudTd DataLabel="@L["User Id"]">
                    <div class="d-flex flex-column">
                        <MudText Typo="Typo.body2">@context.Owner?.UserName</MudText>
                        <MudText Typo="Typo.body2">@context.UserId</MudText>
                    </div>
                </MudTd>
                <MudTd Style="text-align:center" DataLabel="@L["Audit Type"]">
                    @context.AuditType
                </MudTd>
                <MudTd DataLabel="@L["Table Name"]">
                    @context.TableName
                </MudTd>
                <MudTd DataLabel="@L["Primary Key"]">
                    @context.PrimaryKey
                </MudTd>
                <MudTd DataLabel="@L["Date Time"]">
                    @context.DateTime
                </MudTd>
            </RowTemplate>
            <ChildRowContent>
                @if (context.ShowDetails)
                {
                    <MudTr>
                        <td colspan="5">
                            <MudCard Elevation="0">
                                <MudCardHeader>
                                    <CardHeaderContent>
                                        <MudText Typo="Typo.body1"><strong>@context.TableName</strong></MudText>
                                    </CardHeaderContent>
                                </MudCardHeader>
                                <MudCardContent Class="pt-0">
                                    <MudText>Old Values</MudText>
                                    <code class="docs-code docs-code-primary">
                                        @context.OldValues
                                    </code>


                                    <MudText>New Value</MudText>
                                    <code class="docs-code docs-code-primary">
                                        @context.NewValues
                                    </code>

                                </MudCardContent>
                            </MudCard>
                        </td>
                    </MudTr>
                }
            </ChildRowContent>
            <NoRecordsContent>
                <MudText>@ConstantString.NOMACHING</MudText>
            </NoRecordsContent>
            <LoadingContent>
                <MudText>@ConstantString.LOADING</MudText>
            </LoadingContent>
            <PagerContent>
                <MudTablePager PageSizeOptions="@(new int[]{10,15,30,50,100,500,1000})" />
            </PagerContent>
        </MudTable>
    </ChildContent>
    <ErrorContent>
        <CustomError Exception="context"></CustomError>
    </ErrorContent>
</ErrorBoundary>
@code {
    public string Title { get; private set; } = "Audit Trails";
    private MudTable<AuditTrailDto> _table = default!;
    private bool _loading;
    private int _defaultPageSize = 15;
    [Inject]
    private IMediator _mediator { get; set; } = default!;
    private AuditTrailsWithPaginationQuery _query = new();
    private async Task<TableData<AuditTrailDto>> ServerReload(TableState state)
    {
        try
        {
            _loading = true;
      
            _query.Sort = string.IsNullOrEmpty(state.SortLabel) ? "Id" : state.SortLabel;
            _query.SortBy = (state.SortDirection == SortDirection.Ascending ? AutoFilterer.Enums.Sorting.Ascending : AutoFilterer.Enums.Sorting.Descending);
            _query.Page = state.Page + 1;
            _query.PerPage = state.PageSize;

            var result = await _mediator.Send(_query).ConfigureAwait(false);
            return new TableData<AuditTrailDto>() { TotalItems = result.TotalItems, Items = result.Items };
        }
        finally
        {
            _loading = false;
        }
    }
    private async Task OnChangedListView(AuditTrailListView listview)
    {
        _query.ListView = listview;
        await _table.ReloadServerData();
    }
    private async Task OnSearch(string text)
    {
        _query.Keyword = text;
        await _table.ReloadServerData();
    }
    private async Task OnSearch(AuditType? val)
    {
        _query.AuditType = val;
        await _table.ReloadServerData();
    }
    private async Task OnRefresh()
    {
        AuditTrailsCacheKey.Refresh();
        _query.Keyword = string.Empty;
        await _table.ReloadServerData();
    }
    private Task OnShowDetail(AuditTrailDto dto)
    {
        dto.ShowDetails = !dto.ShowDetails;
        return Task.CompletedTask;
    }
}
