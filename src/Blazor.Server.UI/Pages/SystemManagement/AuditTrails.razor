@page "/system/audittrails"
@using CleanArchitecture.Blazor.Application.Features.AuditTrails.DTOs
@using CleanArchitecture.Blazor.Application.Features.AuditTrails.Queries.PaginationQuery
@using CleanArchitecture.Blazor.Application.Features.AuditTrails.Caching
@using CleanArchitecture.Blazor.Application.Constants.Permission


@attribute [Authorize(Policy = Permissions.AuditTrails.View)]
@inject IStringLocalizer<AuditTrails> L
<PageTitle>@L[Title]</PageTitle>
<style>
    .mud-table-toolbar {
        height: 120px !important;
    }
</style>
<ErrorBoundary>
    <ChildContent>
        <MudDataGrid ServerData="@(ServerReload)"
                     T="AuditTrailDto"
                     FixedHeader="true"
                     FixedFooter="true"
                     Virtualize="true"
                     @bind-RowsPerPage="_defaultPageSize"
                     Height="calc(100vh - 300px)"
                     Loading="@_loading"
                     Hover="true" @ref="_table">
            <ToolBarContent>
                <div class="d-flex align-start flex-grow-1">
                    <div class="d-flex gap-4">
                        <MudIcon Icon="@Icons.Material.Filled.ReceiptLong" Size="Size.Large" />
                        <div class="d-flex flex-column">
                            <MudText Typo="Typo.caption">@L[Title]</MudText>
                            <MudEnumSelect Style="min-width:220px" TEnum="AuditTrailListView" ValueChanged="OnChangedListView" Value="_query.ListView" Dense="true" Label="List View">
                            </MudEnumSelect>
                        </div>
                    </div>
                    <div class="flex-grow-1" />

                    <div class="d-flex flex-column justify-end">
                        <div class="d-flex">
                            <MudButton DisableElevation Variant="Variant.Outlined"
                                       Size="Size.Small"
                                       OnClick="@(()=>OnRefresh())"
                                       StartIcon="@Icons.Material.Filled.Refresh" IconColor="Color.Surface" Color="Color.Primary"
                                       Style="margin-right: 5px;">@ConstantString.Refresh</MudButton>
                        </div>

                        <MudStack Row="true" AlignItems="AlignItems.Stretch">
                            <MudEnumSelect TEnum="AuditType?" Placeholder="Search for audit type" Value="@_query.AuditType" Clearable="true" ValueChanged="@(s=>OnSearch(s))" Style="width:160px" FullWidth="true"> </MudEnumSelect>
                            <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Value="@_query.Keyword" Placeholder="Search" Adornment="Adornment.End" Style="width:260px" FullWidth="true"
                                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small"></MudTextField>
                        </MudStack>


                    </div>
                </div>
            </ToolBarContent>
            <Columns>
                <HierarchyColumn T="AuditTrailDto" ButtonDisabledFunc="@(x => x.AuditType== AuditType.None)" />
                <PropertyColumn Property="x => x.UserId" Title="@L[_currentDto.GetMemberDescription(x=>x.UserId)]">
                    <CellTemplate>
                        <div class="d-flex flex-column">
                            <MudText Typo="Typo.body2">@context.Item.Owner?.UserName</MudText>
                            <MudText Typo="Typo.body2">@context.Item.UserId</MudText>
                        </div>
                    </CellTemplate>
                </PropertyColumn>
                <PropertyColumn Property="x => x.AuditType" Title="@L[_currentDto.GetMemberDescription(x=>x.AuditType)]" />
                <PropertyColumn Property="x => x.TableName" Title="@L[_currentDto.GetMemberDescription(x=>x.TableName)]" />
                <PropertyColumn Property="x => x.PrimaryKey" Title="@L[_currentDto.GetMemberDescription(x=>x.PrimaryKey)]" />
                <PropertyColumn Property="x => x.DateTime" Title="@L[_currentDto.GetMemberDescription(x=>x.DateTime)]" />
            </Columns>
            <ChildRowContent>
                <MudCard Elevation="0">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.body1"><strong>@context.Item.TableName</strong></MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent Class="pt-0">
                        <MudText>@L[_currentDto.GetMemberDescription(x=>x.OldValues)]</MudText>
                        <code class="docs-code docs-code-primary">
                            @context.Item.OldValues
                        </code>


                        <MudText>@L[_currentDto.GetMemberDescription(x=>x.NewValues)]</MudText>
                        <code class="docs-code docs-code-primary">
                            @context.Item.NewValues
                        </code>

                    </MudCardContent>
                </MudCard>
            </ChildRowContent>
            <NoRecordsContent>
                <MudText>@ConstantString.NoRecords</MudText>
            </NoRecordsContent>
            <LoadingContent>
                <MudText>@ConstantString.Loading</MudText>
            </LoadingContent>
            <PagerContent>
                <MudDataGridPager PageSizeOptions="@(new int[]{10,15,30,50,100,500,1000})" />
            </PagerContent>
            </MudDataGrid>
        </ChildContent>
        <ErrorContent>
            <CustomError Exception="context"></CustomError>
        </ErrorContent>
        </ErrorBoundary>
        @code {
    public string Title { get; private set; } = "Audit Trails";
    private MudDataGrid<AuditTrailDto> _table = null!;
    private bool _loading;
    private int _defaultPageSize = 15;
    [Inject]
    private IMediator _mediator { get; set; } = default!;
    private AuditTrailDto _currentDto = new();
    private AuditTrailsWithPaginationQuery _query = new();

    [CascadingParameter]
    private Task<AuthenticationState> _authState { get; set; } = default!;
    protected override async Task OnInitializedAsync()
    {
        Title = L[_currentDto.GetClassDescription()];
        var state = await _authState;
    }

    private async Task<GridData<AuditTrailDto>> ServerReload(GridState<AuditTrailDto> state)
    {
        try
        {
            _loading = true;
            _query.Sort = state.SortDefinitions.FirstOrDefault()?.SortBy ?? "Id";
            _query.SortBy = (state.SortDefinitions.FirstOrDefault()?.Descending == false ? AutoFilterer.Enums.Sorting.Ascending : AutoFilterer.Enums.Sorting.Descending);
            _query.Page = state.Page + 1;
            _query.PerPage = state.PageSize;

            var result = await _mediator.Send(_query).ConfigureAwait(false);
            return new GridData<AuditTrailDto>() { TotalItems = result.TotalItems, Items = result.Items };
        }
        finally
        {
            _loading = false;
        }
    }
    private async Task OnChangedListView(AuditTrailListView listview)
    {
        _query.ListView = listview;
        await _table.ReloadServerData();
    }
    private async Task OnSearch(string text)
    {
        _query.Keyword = text;
        await _table.ReloadServerData();
    }
    private async Task OnSearch(AuditType? val)
    {
        _query.AuditType = val;
        await _table.ReloadServerData();
    }
    private async Task OnRefresh()
    {
        AuditTrailsCacheKey.Refresh();
        _query.Keyword = string.Empty;
        await _table.ReloadServerData();
    }
    private Task OnShowDetail(AuditTrailDto dto)
    {
        dto.ShowDetails = !dto.ShowDetails;
        return Task.CompletedTask;
    }
}
