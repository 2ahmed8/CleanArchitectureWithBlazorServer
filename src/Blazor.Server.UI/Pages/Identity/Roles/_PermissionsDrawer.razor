@inherits MudComponentBase
@inject IStringLocalizer<Roles> L

<MudDrawer Open="@Open"
           Width="400px"
           Height="100vh"
           OpenChanged="@(s=>OnOpenChanged.InvokeAsync(s))"
           Anchor="Anchor.End" Elevation="1" Variant="@DrawerVariant.Temporary">
    <MudDrawerHeader>
        <MudText Typo="Typo.h6">Set Permissions</MudText>
    </MudDrawerHeader>
    @foreach (var group in Permissions.Select(x => x.Group).Distinct().ToList())
    {
        <MudCard class="ma-4">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudStack Spacing="1">
                        <MudText Typo="Typo.body1">
                            @group
                        </MudText>
                        <MudText Typo="Typo.body2">
                            @(Permissions.FirstOrDefault(x => x.Group == group)?.Description)
                        </MudText>
                    </MudStack>
                </CardHeaderContent>
                <CardHeaderActions>
                    <MudTooltip Text="@L["Assign All"]">
                        <MudIconButton Icon="@Icons.Filled.AutoFixHigh" Color="Color.Default" OnClick="@(()=>OnAssignAll(group))" />
                    </MudTooltip>
                </CardHeaderActions>
            </MudCardHeader>
            <MudCardContent>
                @for (var i = 0; i < Permissions.Count; i++)
                {
                    var x = i;
                    if (Permissions[x].Group == group)
                    {
                        <MudCheckBox Dense="true"
                         T="bool"
                         Size="Size.Small"
                         Checked="@Permissions[x].Assigned"
                         Label="@Permissions[x].ClaimValue"
                         CheckedChanged="@(s=>OnAssignChanged.InvokeAsync(Permissions[x]))"
                         Color="Color.Primary"></MudCheckBox>
                    }
                }
            </MudCardContent>

        </MudCard>
    }
</MudDrawer>

@code {
    [EditorRequired] [Parameter] public List<PermissionModel> Permissions { get; set; } = new()!;
    [EditorRequired] [Parameter] public bool Open { get; set; } = default!;
    [EditorRequired] [Parameter] public EventCallback<PermissionModel> OnAssignChanged { get; set; }
    [EditorRequired] [Parameter] public EventCallback<List<PermissionModel>> OnAssignAllChanged { get; set; }
    [EditorRequired] [Parameter] public EventCallback<bool> OnOpenChanged { get; set; }
    private async Task OnAssignAll(string? groupName)
    {
        var list = new List<PermissionModel>();
        for(var i = 0; i < Permissions.Count; i++)
        {
            if (Permissions[i].Group == groupName)
            {
                Permissions[i].Assigned = true;
                list.Add(Permissions[i]);
            }
        }
        await  OnAssignAllChanged.InvokeAsync(list);
    }
}
