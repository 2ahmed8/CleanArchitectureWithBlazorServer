@using LazyCache
@using CleanArchitecture.Blazor.Application.Features.Identity.Dto
@using System.Security.Claims
@using System.ComponentModel
@using System.Reflection
@using CleanArchitecture.Blazor.Application.Common.ExceptionHandlers
@using CleanArchitecture.Blazor.Application.Constants.ClaimTypes
@using CleanArchitecture.Blazor.Application.Constants.Permission
@inherits OwningComponentBase
@page "/identity/roles"

@attribute [Authorize(Policy = Permissions.Roles.View)]
@inject IStringLocalizer<Roles> L
<PageTitle>@Title</PageTitle>
<style>
    .mud-table-toolbar {
        height: 120px !important;
    }
</style>
<ErrorBoundary>
    <ChildContent>

        <MudDataGrid @ref="_table"
                  FixedHeader="true"
                  FixedFooter="false"
                  Height="calc(100vh - 300px)"
                  Hover="true"
                  MultiSelection="true"
                  @bind-RowsPerPage="_defaultPageSize"
                  @bind-SelectedItems="_selectedItems"
                  Loading="@_loading"
                  ServerData="@(ServerReload)">
            <ToolBarContent>
                <div class="d-flex align-start flex-grow-1">
                    <div class="d-flex gap-4">
                        <MudIcon Icon="@Icons.Material.Filled.Groups" Size="Size.Large" />
                        <div class="d-flex flex-column">
                            <MudText Typo="Typo.caption">@L["Roles"]</MudText>
                        </div>
                    </div>
                    <div class="flex-grow-1" />
                    <div class="d-flex flex-column justify-end">
                        <div class="d-flex">
                            <MudHidden Breakpoint="Breakpoint.SmAndDown">
                                <MudButton DisableElevation Variant="Variant.Outlined"
                                           Size="Size.Small"
                                           OnClick="OnRefresh"
                                           Disabled="@_loading"
                                           StartIcon="@Icons.Material.Filled.Refresh" IconColor="Color.Surface" Color="Color.Primary"
                                           Style="margin-right: 4px; margin-bottom:4px">@ConstantString.Refresh</MudButton>
                                @if (_canCreate)
                                {
                                    <MudButton DisableElevation Variant="Variant.Outlined" Color="Color.Primary"
                                           StartIcon="@Icons.Material.Filled.Add"
                                           Size="Size.Small"
                                           OnClick="OnCreate"
                                           Style="margin-right: 4px; margin-bottom:4px"
                                           IconColor="Color.Surface">@ConstantString.New</MudButton>
                                }
                                @if (_canDelete)
                                {
                                    <MudButton DisableElevation Variant="Variant.Outlined" Color="Color.Error"
                                           StartIcon="@Icons.Material.Filled.Delete"
                                           Disabled="@(!(_selectedItems.Count>0))"
                                           OnClick="OnDeleteChecked"
                                           Size="Size.Small"
                                           Style="margin-right: 4px; margin-bottom:4px"
                                           IconColor="Color.Surface">@ConstantString.Delete</MudButton>
                                }
                                
                                @if (_canExport)
                                {
                                    <MudButton DisableElevation Variant="Variant.Outlined" Color="Color.Primary"
                                           StartIcon="@Icons.Material.Filled.Download"
                                           Size="Size.Small"
                                           Style="margin-right: 4px; margin-bottom:4px"
                                           IconColor="Color.Surface">@ConstantString.Export</MudButton>
                                }
                                @if (_canImport)
                                {
                                    <MudFileUpload T="IBrowserFile" FilesChanged="OnImportData" Accept=".xlsx" Style="margin-top:0px;">
                                        <ButtonTemplate>
                                            <MudButton HtmlTag="label"
                                                   Size="Size.Small"
                                                   Variant="Variant.Outlined"
                                                   Color="Color.Primary"
                                                   Disabled="@_loading"
                                                   StartIcon="@Icons.Material.Filled.Upload"
                                                       for="@context">
                                                @if (_uploading)
                                                {
                                                    <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                                                    @ConstantString.Uploading
                                                }
                                                else
                                                {
                                                    @ConstantString.Import
                                                }
                                            </MudButton>
                                        </ButtonTemplate>
                                    </MudFileUpload>
                                }
                            </MudHidden>
                            <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="true">
                                <MudMenu AnchorOrigin="Origin.BottomLeft" StartIcon="@Icons.Material.Filled.KeyboardCommandKey" EndIcon="@Icons.Material.Filled.KeyboardArrowDown" Label="@L["Action"]" Color="Color.Primary" Variant="Variant.Filled">
                                    <MudMenuItem Disabled="@_loading" OnClick="@(()=>OnRefresh())">@ConstantString.Refresh</MudMenuItem>
                                    @if (_canCreate)
                                    {
                                        <MudMenuItem OnClick="OnCreate">@ConstantString.New</MudMenuItem>
                                    }
                                    @if (_canDelete)
                                    {
                                        <MudMenuItem OnClick="OnDeleteChecked">@ConstantString.Delete</MudMenuItem>
                                    }
                                </MudMenu>
                            </MudHidden>
                        </div>
                        @if (_canSearch)
                        {
                            <MudTextField T="string" Value="_searchString" FullWidth="false" ValueChanged="@(s=>OnSearch(s))"
                                      Placeholder="@(L["Search for role name"])" Adornment="Adornment.End"
                                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small" Class="mt-0 mb-3">
                            </MudTextField>
                        }

                    </div>
                </div>
            </ToolBarContent>
             <Columns>
                <SelectColumn ShowInFooter="false" ></SelectColumn>
                <TemplateColumn CellStyle="width:60px" Title="@ConstantString.Actions" Sortable="false" >
                    <CellTemplate>
                    @if (_canEdit || _canDelete)
                    {
                            <MudMenu Icon="@Icons.Material.Filled.Edit" Variant="Variant.Filled" DisableElevation="true" Size="Size.Small"
                                 Dense="true"
                                 EndIcon="@Icons.Material.Filled.KeyboardArrowDown" IconColor="Color.Info" AnchorOrigin="Origin.CenterLeft">
                            @if (_canEdit)
                            {
                                <MudMenuItem OnClick="@(()=>OnEdit(context.Item))">@ConstantString.Edit</MudMenuItem>
                            }
                            @if (_canDelete)
                            {
                                    <MudMenuItem OnClick="@(()=>OnDelete(context.Item))">@ConstantString.Delete</MudMenuItem>
                            }
                        </MudMenu>
                    }
                    else
                    {
                        <MudButton Variant="Variant.Filled" DisableElevation="true"
                                   StartIcon="@Icons.Material.Filled.DoNotTouch" IconColor="Color.Secondary" Size="Size.Small"
                                   Color="Color.Surface">
                            @ConstantString.NoAllowed
                        </MudButton>
                    }
                    </CellTemplate>
                </TemplateColumn>
                <PropertyColumn Property="x => x.Name" Title="@L[_currentDto.GetMemberDescription(x=>x.Name)]">
                    <CellTemplate>
                        <div class="d-flex flex-column">
                            <MudText Typo="Typo.body2">@context.Item.Name</MudText>
                            <MudText Typo="Typo.body2">@context.Item.Description</MudText>
                        </div>
                    </CellTemplate>
                    <FooterTemplate>
                        @L["Selected"]: @(this._selectedItems.Count)
                    </FooterTemplate>
                </PropertyColumn>
            </Columns>
            <PagerContent>
                <MudDataGridPager PageSizeOptions="@(new int[]{10,15,30,50,100,500,1000})" />
            </PagerContent>
        </MudDataGrid>

        <_PermissionsDrawer OnAssignAllChanged="OnAssignAllChangedHandler" Waiting="@processing" OnOpenChanged="OnOpenChangedHandler" Open="_showPermissionsDrawer" Permissions="_permissions" OnAssignChanged="OnAssignChangedHandler"></_PermissionsDrawer>
    </ChildContent>
    <ErrorContent>
        <CustomError Exception="context"></CustomError>
    </ErrorContent>
</ErrorBoundary>

@code {
    private bool processing = false;
    private string _currentRoleName = string.Empty;
    private int _defaultPageSize = 15;
    private HashSet<ApplicationRoleDto> _selectedItems = new();
    private ApplicationRoleDto _currentDto = new();
    private string _searchString = string.Empty;
    public string? Title { get; private set; }
    [CascadingParameter]
    private Task<AuthenticationState> _authState { get; set; } = default!;

    private RoleManager<ApplicationRole> _roleManager { get; set; } = default!;

    private TimeSpan refreshInterval => TimeSpan.FromSeconds(60);
    private LazyCacheEntryOptions _options => new LazyCacheEntryOptions().SetAbsoluteExpiration(refreshInterval, ExpirationMode.LazyExpiration);
    [Inject]
    private IAppCache _cache { get; set; } = null!;
    private List<PermissionModel> _permissions = new();
    private IList<Claim> _assignedClaims = default!;
    private MudDataGrid<ApplicationRoleDto> _table = null!;
    private bool _canCreate;
    private bool _canSearch;
    private bool _canEdit;
    private bool _canDelete;
    private bool _canManagePermissions;
    private bool _canImport;
    private bool _canExport;
    private bool _showPermissionsDrawer;
    private bool _loading;
    private bool _uploading;
    protected override async Task OnInitializedAsync()
    {
        _roleManager = ScopedServices.GetRequiredService<RoleManager<ApplicationRole>>();
        Title = L[_currentDto.GetClassDescription()];
        var state = await _authState;
        _canCreate = (await AuthService.AuthorizeAsync(state.User, Permissions.Roles.Create)).Succeeded;
        _canSearch = (await AuthService.AuthorizeAsync(state.User, Permissions.Roles.Search)).Succeeded;
        _canEdit = (await AuthService.AuthorizeAsync(state.User, Permissions.Roles.Edit)).Succeeded;
        _canDelete = (await AuthService.AuthorizeAsync(state.User, Permissions.Roles.Delete)).Succeeded;
        _canManagePermissions = (await AuthService.AuthorizeAsync(state.User, Permissions.Roles.ManagePermissions)).Succeeded;
        _canImport = false;// (await AuthService.AuthorizeAsync(state.User, Permissions.Users.Import)).Succeeded;
        _canExport = false;// (await AuthService.AuthorizeAsync(state.User, Permissions.Users.Export)).Succeeded;
    }
    private async Task<GridData<ApplicationRoleDto>> ServerReload(GridState<ApplicationRoleDto> state)
    {
        try
        {
            _loading = true;
            var items =await _roleManager.Roles.Where(x => x.Name.Contains(_searchString) || x.Description.Contains(_searchString))
                  .EFOrderBySortDefinitions<ApplicationRole,ApplicationRoleDto>(state)
                  .Skip(state.Page * state.PageSize).Take(state.PageSize)
                  .Select(x => new ApplicationRoleDto() { Id = x.Id, Name = x.Name!, Description = x.Description, NormalizedName = x.NormalizedName })
                  .ToListAsync();
            var total = await _roleManager.Roles.CountAsync(x => x.Name.Contains(_searchString) || x.Description.Contains(_searchString));
            return new GridData<ApplicationRoleDto>() { TotalItems = total, Items = items };
        }
        finally
        {
            _loading = false;
        }
    }
    private async Task OnSearch(string text)
    {
        if (_loading) return;
        _searchString = text;
        await _table.ReloadServerData();
    }
    private async Task OnRefresh()
    {
        await _table.ReloadServerData();
    }

    private async Task OnCreate()
    {
        var model = new ApplicationRoleDto() { Name = "" };
        var parameters = new DialogParameters { ["model"] = model };
        var options = new DialogOptions { CloseButton = true, CloseOnEscapeKey = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = DialogService.Show<_RoleFormDialog>(L["Create a new role"], parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var applicationRole = new ApplicationRole()
                {
                    Name = model.Name,
                    Description = model.Description
                };

            var state = await _roleManager.CreateAsync(applicationRole);
            if (state.Succeeded)
            {
                Snackbar.Add($"{ConstantString.CreateSuccess}", MudBlazor.Severity.Info);
                await OnRefresh();
            }
            else
            {
                Snackbar.Add($"{string.Join(",", (state.Errors.Select(x => x.Description).ToArray()))}", MudBlazor.Severity.Error);
            }
        }
    }
    private async Task OnEdit(ApplicationRoleDto item)
    {
        var parameters = new DialogParameters { ["model"] = item };
        var options = new DialogOptions { CloseButton = true, CloseOnEscapeKey = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = DialogService.Show<_RoleFormDialog>(L["Edit the role"], parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var role = await _roleManager.FindByIdAsync(item.Id);
            if (role is not null)
            {
                role.Description = item.Description;
                role.Name = item.Name;
                var state = await _roleManager.UpdateAsync(role);
                if (state.Succeeded)
                {
                    Snackbar.Add($"{ConstantString.UpdateSuccess}", MudBlazor.Severity.Info);
                    await OnRefresh();
                }
                else
                {
                    Snackbar.Add($"{string.Join(",", (state.Errors.Select(x => x.Description).ToArray()))}", MudBlazor.Severity.Error);
                }

            }
        }
    }
   
    private async Task OnSetPermissions(ApplicationRoleDto item)
    {
        _showPermissionsDrawer = true;
        _permissions = new();
        _currentRoleName = item.Name!;
        _permissions = await GetAllPermissions(item);


    }

    private async Task<List<PermissionModel>> GetAllPermissions(ApplicationRoleDto dto)
    {
        Func<string, Task<IList<Claim>>> getcalims = async (roleId) =>
        {
            var role = await _roleManager.FindByIdAsync(dto.Id) ?? throw new NotFoundException($"not found application role: {roleId}");
            var claims = await _roleManager.GetClaimsAsync(role);
            return claims;
        };
        var key = $"get-claims-by-{dto.Id}";
        _assignedClaims = await _cache.GetOrAddAsync(key, async () => await getcalims(dto.Id), _options);
        var allPermissions = new List<PermissionModel>();
        var modules = typeof(Permissions).GetNestedTypes();
        foreach (var module in modules)
        {
            var moduleName = string.Empty;
            var moduleDescription = string.Empty;
            if (module.GetCustomAttributes(typeof(DisplayNameAttribute), true)
                .FirstOrDefault() is DisplayNameAttribute displayNameAttribute)
                moduleName = displayNameAttribute.DisplayName;

            if (module.GetCustomAttributes(typeof(DescriptionAttribute), true)
                .FirstOrDefault() is DescriptionAttribute descriptionAttribute)
                moduleDescription = descriptionAttribute.Description;

            var fields = module.GetFields(BindingFlags.Public | BindingFlags.Static | BindingFlags.FlattenHierarchy);
            foreach (var fi in fields)
            {
                var propertyValue = fi.GetValue(null);

                if (propertyValue is not null)
                {
                    var claimValue = propertyValue.ToString();
                    allPermissions.Add(
                        new PermissionModel
                            {
                                RoleId = dto.Id,
                                ClaimValue = claimValue,
                                ClaimType = ApplicationClaimTypes.Permission,
                                Group = moduleName,
                                Description = moduleDescription,
                                Assigned = _assignedClaims.Any(x => x.Value == claimValue)
                            });
                }
            }
        }
        return allPermissions;
    }
    private Task OnOpenChangedHandler(bool state)
    {
        _showPermissionsDrawer = state;
        return Task.CompletedTask;
    }
    private async Task OnAssignChangedHandler(PermissionModel model)
    {
        try
        {
            processing = true;
            var roleId = model.RoleId!;
            var role = await _roleManager.FindByIdAsync(roleId) ?? throw new NotFoundException($"Application role {roleId} Not Found."); ;
            model.Assigned = !model.Assigned;
            if (model.Assigned && model.ClaimType is not null && model.ClaimValue is not null)
            {
                await _roleManager.AddClaimAsync(role, new Claim(model.ClaimType, model.ClaimValue));
                Snackbar.Add($"{L["Authorization successful"]}", MudBlazor.Severity.Info);
            }
            else
            {
                var removed = _assignedClaims.FirstOrDefault(x => x.Value == model.ClaimValue);
                if (removed is not null)
                {
                    await _roleManager.RemoveClaimAsync(role, removed);
                }
                Snackbar.Add($"{L["Authorization canceled successfully"]}", MudBlazor.Severity.Info);
            }
            var key = $"get-claims-by-{role.Id}";
            _cache.Remove(key);
        }
        finally
        {
            processing = false;
        }

    }
    private async Task OnAssignAllChangedHandler(List<PermissionModel> models)
    {
        try
        {
            processing = true;
            var roleId = models.First().RoleId;
            var role = await _roleManager.FindByIdAsync(roleId!) ?? throw new NotFoundException($"not found application role: {roleId}");
            foreach (var model in models)
            {
                if (model.Assigned)
                {
                    if (model.ClaimType is not null && model.ClaimValue is not null)
                    {
                        await _roleManager.AddClaimAsync(role, new Claim(model.ClaimType, model.ClaimValue));
                    }
                }
                else
                {
                    var removed = _assignedClaims.FirstOrDefault(x => x.Value == model.ClaimValue);
                    if (removed is not null)
                    {
                        await _roleManager.RemoveClaimAsync(role, removed);
                    }
                }
            }
            Snackbar.Add($"{L["Authorization has been changed"]}", MudBlazor.Severity.Info);
            await Task.Delay(300);
            var key = $"get-claims-by-{role.Id}";
            _cache.Remove(key);
        }
        finally
        {
            processing = false;
        }
    }
    private async Task OnDelete(ApplicationRoleDto dto)
    {
        string deleteContent = ConstantString.DeleteConfirmation;
        var parameters = new DialogParameters
        {
            { nameof(ConfirmationDialog.ContentText), string.Format(deleteContent, dto.Name) }
        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true, DisableBackdropClick = true };
        var dialog = DialogService.Show<ConfirmationDialog>(ConstantString.DeleteConfirmationTitle, parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var deleteRoles = await _roleManager.Roles.Where(x => x.Id==dto.Id).ToListAsync();
            foreach (var role in deleteRoles)
            {
                var deleteresult = await _roleManager.DeleteAsync(role);
                if (!deleteresult.Succeeded)
                {
                    Snackbar.Add($"{string.Join(",", (deleteresult.Errors.Select(x => x.Description).ToArray()))}", MudBlazor.Severity.Error);
                    return;
                }

            }
            Snackbar.Add($"{ConstantString.DeleteSuccess}", MudBlazor.Severity.Info);
            await OnRefresh();
        }
    }
    private async Task OnDeleteChecked()
    {
        string deleteContent = ConstantString.DeleteConfirmation;
        var parameters = new DialogParameters
        {
            { nameof(ConfirmationDialog.ContentText), string.Format(deleteContent, _selectedItems.Count) }
        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true, DisableBackdropClick = true };
        var dialog = DialogService.Show<ConfirmationDialog>(ConstantString.DeleteConfirmationTitle, parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var deleteId = _selectedItems.Select(x => x.Id).ToArray();
            var deleteRoles = await _roleManager.Roles.Where(x => deleteId.Contains(x.Id)).ToListAsync();
            foreach (var role in deleteRoles)
            {
                var deleteresult = await _roleManager.DeleteAsync(role);
                if (!deleteresult.Succeeded)
                {
                    Snackbar.Add($"{string.Join(",", (deleteresult.Errors.Select(x => x.Description).ToArray()))}", MudBlazor.Severity.Error);
                    return;
                }

            }
            Snackbar.Add($"{ConstantString.DeleteSuccess}", MudBlazor.Severity.Info);
            await OnRefresh();
        }
    }
    private Task OnExport()
    {

        return Task.CompletedTask;
    }
    private Task OnImportData(IBrowserFile file)
    {
        return Task.CompletedTask;
    }



}
