@page "/indentity/roles"
@using Microsoft.AspNetCore.Identity

@attribute [Authorize(Policy = Permissions.Roles.View)]
@inject IStringLocalizer<Roles> L
<PageTitle>@Title</PageTitle>
<style>
    .mud-toolbar {
        height: 84px !important;
    }
</style>
<ErrorBoundary>
    <ChildContent>

        <MudTable Items="@RoleList"
                  FixedHeader="true"
                  FixedFooter="true"
                  Height="calc(100vh - 296px)"
                  Hover="true"
                  MultiSelection="true"
                  SelectedItems="@SelectItems"
                  SortLabel="@L["Sort By"]"
                  Filter="new Func<ApplicationRole,bool>(_quickFilter)">
            <ToolBarContent>
                <div class="justify-start pt-3">
                    <MudText Typo="Typo.h6">Roles</MudText>
                    <MudButton DisableElevation Variant="Variant.Outlined"
                               Size="Size.Small"
                               StartIcon="@Icons.Material.Filled.Refresh" IconColor="Color.Surface" Color="Color.Primary"
                               Style="margin-right: 5px;">@L["Refresh"]</MudButton>
                    @if (_canCreate)
                    {
                        <MudButton DisableElevation Variant="Variant.Outlined" Color="Color.Primary"
                               StartIcon="@Icons.Material.Filled.Add"
                               Size="Size.Small"
                               Style="margin-right: 5px;"
                               IconColor="Color.Surface">@L["Create"]</MudButton>
                    }
                    @if (_canDelete)
                    {
                        <MudButton DisableElevation Variant="Variant.Outlined" Color="Color.Error"
                               StartIcon="@Icons.Material.Filled.Delete"
                               Disabled="@(!(SelectItems.Count>0))"
                               Size="Size.Small"
                               Style="margin-right: 5px;"
                               IconColor="Color.Surface">@L["Delete"]</MudButton>
                    }
                    @if (_canImport)
                    {
                        <MudButton DisableElevation Variant="Variant.Outlined" Color="Color.Primary"
                               StartIcon="@Icons.Material.Filled.Upload"
                               Size="Size.Small"
                               Style="margin-right: 5px;"
                               IconColor="Color.Surface">@L["Import Data"]</MudButton>
                    }
                    @if (_canExport)
                    {
                        <MudButton DisableElevation Variant="Variant.Outlined" Color="Color.Primary"
                               StartIcon="@Icons.Material.Filled.Download"
                               Size="Size.Small"
                               Style="margin-right: 5px;"
                               IconColor="Color.Surface">@L["Export Data"]</MudButton>
                    }
                </div>
                <MudSpacer />
                @if (_canSearch)
                {
                    <MudTextField @bind-Value="_searchString" Immediate="true" FullWidth="false"
                              Placeholder="@(L["Search for role name"])" Adornment="Adornment.End"
                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 mb-3">
                    </MudTextField>
                }
            </ToolBarContent>
            <HeaderContent>
                <MudTh>@L["Actions"]</MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<ApplicationRole, object>(x=>x.Name)">@L["Name"]</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<ApplicationRole, object>(x=>x.Description)">@L["Description"]</MudTableSortLabel></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Actions">
                    @if(_canEdit || _canManagePermissions ) {
                    <MudMenu Label="@L["Actions"]" Variant="Variant.Filled" DisableElevation="true"
                             EndIcon="@Icons.Filled.KeyboardArrowDown" IconColor="Color.Info" Direction="Direction.Left"
                             OffsetX="true">
                        @if (_canEdit)
                        {
                            <MudMenuItem>@L["Edit"]</MudMenuItem>
                        }
                        @if (_canManagePermissions)
                        {
                            <MudMenuItem>@L["Set Permissions"]</MudMenuItem>
                        }
                    </MudMenu>
                    } else {
                    <MudButton Variant="Variant.Filled" DisableElevation="true"
                               StartIcon="@Icons.Material.Filled.DoNotTouch" IconColor="Color.Secondary" Size="Size.Small"
                               Color="Color.Surface">
                        @L["No Allowed"]
                    </MudButton>
                    }
                </MudTd>
                <MudTd DataLabel="Name">@context.Name</MudTd>
                <MudTd DataLabel="Description">@context.Description</MudTd>
                
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>


    </ChildContent>
    <ErrorContent>
        <MudAlert Class="mt-auto" Severity="MudBlazor.Severity.Warning">Oopsie !! ðŸ˜” @context.GetBaseException().Message</MudAlert>
    </ErrorContent>
</ErrorBoundary>

@code {


    private IEnumerable<ApplicationRole> RoleList = new List<ApplicationRole>();
    private HashSet<ApplicationRole> SelectItems = new HashSet<ApplicationRole>();
    private string _searchString;
    private bool _sortNameByLength;
    public string? Title { get; private set; }
    [CascadingParameter]
    private Task<AuthenticationState> AuthState { get; set; } = default!;
    [Inject]
    private IAuthorizationService AuthService { get; set; } = default!;
    [Inject]
    private RoleManager<ApplicationRole> _roleManager { get; set; } = default!;

    private bool _canCreate;
    private bool _canSearch;
    private bool _canEdit;
    private bool _canDelete;
    private bool _canManagePermissions;
    private bool _canImport;
    private bool _canExport;
    protected override async Task OnInitializedAsync()
    {
        Title = L["Roles"];
        var state = await AuthState;
        _canCreate = (await AuthService.AuthorizeAsync(state.User, Permissions.Roles.Create)).Succeeded;
        _canSearch = (await AuthService.AuthorizeAsync(state.User, Permissions.Roles.Search)).Succeeded;
        _canEdit = (await AuthService.AuthorizeAsync(state.User, Permissions.Roles.Edit)).Succeeded;
        _canDelete = (await AuthService.AuthorizeAsync(state.User, Permissions.Roles.Delete)).Succeeded;
        _canManagePermissions = (await AuthService.AuthorizeAsync(state.User, Permissions.Roles.ManagePermissions)).Succeeded;
        _canImport = (await AuthService.AuthorizeAsync(state.User, Permissions.Users.Import)).Succeeded;
        _canExport = (await AuthService.AuthorizeAsync(state.User, Permissions.Users.Export)).Succeeded;
        RoleList = await _roleManager.Roles.ToListAsync();

    }
    private Func<ApplicationRole, bool> _quickFilter => x =>
       {
           if (string.IsNullOrWhiteSpace(_searchString))
               return true;

           if (x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
               return true;

           if (x.Description.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
               return true;

           return false;
       };

}
